#!/usr/bin/env bash

# Copyright (C) Harsh Shandilya <msfjarvis@gmail.com>
# SPDX-License-Identifier: GPL-3.0-only

# Source common functions
# shellcheck disable=2029
SCRIPT_DIR="$(cd "$( dirname "$( readlink -f "${BASH_SOURCE[0]}" )" )" && pwd)"
source "${SCRIPT_DIR}"/common

DEFCONFIG="caesium_defconfig"
KERNEL="Image.gz-dtb"
DEFAULT_BRANCH="XOS-8.1"
TREES="rr:pie|aosip:pie"
JARVISBOX_URL="https://download.msfjarvis.website/caesium"

# Caesium Kernel Details
KERNEL_NAME="Caesium"
INCREMENTAL_VERSION="${CAESIUM_VERSION:-Test}"
LOCALVERSION="-${INCREMENTAL_VERSION}"
GIT_HASH=$(git rev-parse --short HEAD)
[ -z "${DEVICE}" ] && DEVICE="oneplus3"
FINAL_VER="${KERNEL_NAME}-${DEVICE}-${INCREMENTAL_VERSION}-${GIT_HASH}"

# Vars
ARCH=arm64
SUBARCH=arm64
USER=MSF
HOST=jarvisbox

# Paths
WORKING_DIR=$(pwd)
ANYKERNEL_DIR="${WORKING_DIR}/../AnyKernel2"
ARM64_TOOLCHAIN_DIR="${WORKING_DIR}/../toolchains/aarch64-linux-gnu"
ARM_TOOLCHAIN_DIR="${WORKING_DIR}/../toolchains/arm-linux-gnueabi"
CLANG_TOOLCHAIN_DIR=""
COMPILER="gcc"
OUT_DIR="${WORKING_DIR}/out/"
ZIP_MOVE="${WORKING_DIR}/zips/"
CCACHE="$(command -v ccache)"

# Trap to bail out properly
trap 'exit 1' SIGINT SIGTERM

# Load overrides
[ -f ".buildconfig" ] && source ".buildconfig"

## Functions
# Wrapper around tgm to avoid having to pass the second chat ID param everywhere
function tgm_caesium {
    [ -z "${TYPE}" ] && return
    local CHAT_ID
    case "${DEVICE}" in
    "oneplus3") CHAT_ID="${OP3_CAESIUM_CHAT_ID}" ;;
    "wahoo") CHAT_ID="${MSF_TG_ID}" ;;
    esac
    if [ "${TYPE}" == "test" ] || [ "${TYPE}" == "alpha" ]; then
        tgm "${1}" &
    else
        tgm "${1}" "${CHAT_ID}" &
    fi
}

# Wrapper function around make to ensure all the variables go through
function make_wrapper_gcc {
    make O="${OUT_DIR}" \
        ARCH="${ARCH}" SUBARCH="${SUBARCH}" \
        KBUILD_BUILD_USER="${USER}" \
        KBUILD_BUILD_HOST="${HOST}" \
        LOCALVERSION="${LOCALVERSION}" \
        CROSS_COMPILE="${CCACHE} ${CROSS_COMPILE}" \
        CROSS_COMPILE_ARM32="${CCACHE} ${CROSS_COMPILE_ARM32}" \
        -j"$(nproc --all)" "${@}"
}

function make_wrapper_clang {
    make O="${OUT_DIR}" \
        ARCH="${ARCH}" SUBARCH="${SUBARCH}" \
        KBUILD_BUILD_USER="${USER}" \
        KBUILD_BUILD_HOST="${HOST}" \
        LOCALVERSION="${LOCALVERSION}" \
        CROSS_COMPILE="${CROSS_COMPILE}" \
        CROSS_COMPILE_ARM32="${CROSS_COMPILE_ARM32}" \
        CC="${CCACHE} ${CC}" CLANG_TRIPLE="aarch64-linux-gnu" \
        KBUILD_COMPILER_STRING="${KBUILD_COMPILER_STRING}" \
        -j"$(nproc --all)" "${@}"
}

function kmake {
    PATH="${SCRIPT_DIR}/bin:${PATH}"
    if [ -z "${VERBOSE}" ]; then
        make_wrapper_"${COMPILER}" "${@}" |& ag "error:|warning"
    else
        make_wrapper_"${COMPILER}" "${@}"
    fi
}
# Pushes a local file to my webserver
function publish {
    local TYPE; TYPE="${2:?}"
    rsync -avR "${1}" "${CAESIUM_UPLOAD_HOST}:${CAESIUM_UPLOAD_PATH}/${DEVICE}/${TYPE}/" --progress --verbose
}

# Preps the server folder structure for new builds
function prepdirs {
    ssh "${CAESIUM_UPLOAD_HOST}" mkdir -p "${CAESIUM_UPLOAD_PATH}/${DEVICE}/${1}/"
    ssh "${CAESIUM_UPLOAD_HOST}" mkdir -p "${CAESIUM_UPLOAD_PATH/caesium/archive}/${DEVICE}/${1}/"
    ssh "${CAESIUM_UPLOAD_HOST}" rm -rf "${CAESIUM_UPLOAD_PATH/caesium/archive}/${DEVICE}/${1}/*"
    ssh "${CAESIUM_UPLOAD_HOST}" mv "${CAESIUM_UPLOAD_PATH}/${DEVICE}/${1}/*" "${CAESIUM_UPLOAD_PATH/caesium/archive}/${DEVICE}/${1}/"
}

# The meat of the telegram notifications workflow
function pushcaesiumtg {
    [ -z "${TYPE}" ] && return
    local FILE TYPE FINAL_VER FILES_TO_PUBLISH MESSAGE CHANGELOG BUILD_URL
    FILE="${1}"
    TYPE="${2}"
    FINAL_VER="${FILE/.zip/}"
    FILES_TO_PUBLISH=("${FILE}" "${FILE}".md5sum)
    case "${TYPE}" in
        "alpha"|"beta"|"stable"|"test") ;;
        *) echo "Invalid build type" && return ;;
    esac
    if [ -f changelog ]; then
        FILES_TO_PUBLISH+=(changelog)
        cp changelog zips/changelog
        CHANGELOG="$(cat changelog)"
    fi
    cd zips || return; md5sum "${FILE}" > "${FILE}".md5sum
    prepdirs "${TYPE}"
    if [ "${TYPE}" == "stable" ]; then
        for ITEM in beta test alpha; do
            prepdirs "${ITEM}"
        done
    fi
    for ITEM in "${FILES_TO_PUBLISH[@]}"; do
        publish "${ITEM}" "${TYPE}"
    done
    cd ../ || return
    if [ "${TYPE}" == "stable" ]; then
      release "${FILE}"
    fi
    BUILD_URL="${JARVISBOX_URL}/${DEVICE}/${TYPE}/${FILE}"
    MESSAGE="New [${TYPE}](${JARVISBOX_URL}/${TYPE}) build uploaded : [${FILE}](${BUILD_URL})"
    if [ "${CHANGELOG}" != "" ]; then
        MESSAGE="${MESSAGE}

Changelog:

\`${CHANGELOG}\`"
    fi
        tgm_caesium " ${MESSAGE}"
}

# Called by pushcaesiumtg on release builds
function release {
    local TAG; TAG=$(echo "${1}" | cut -d / -f 2 | cut -d '-' -f 3 | sed 's/\.zip//')
    tgm_caesium "Tagging and releasing ${TAG}"
    git -C ../AnyKernel2/ push
    git -C ../AnyKernel2/ tag -s "${TAG}"
    git -C ../AnyKernel2/ push origin "${TAG}"
    git checkout "${DEFAULT_BRANCH}"
    git merge staging
    git push origin "${DEFAULT_BRANCH}"
    git tag -as "${TAG}"
    git push origin "${TAG}"
    hub release create "${TAG}" -a zips/"${FILE}" -a zips/"${FILE}".md5sum
    [ "${DEVICE}" == "oneplus3" ] && update_source_trees "${TAG}"
}

# Takes a predefined list of trees to merge into and
# programmatically updates them to the latest tag.
function update_source_trees {
    local TAG="${1}"
    IFS='|' read -r -a MERGEABLES <<< "${TREES}"
    for ITEM in "${MERGEABLES[@]}"; do
        IFS=':' read -r -a ELEMENTS <<< "${ITEM}"
        if [ "${#ELEMENTS[@]}" -ge 2 ]; then
            REMOTE="${ELEMENTS[0]}"
            BRANCH="${ELEMENTS[1]}"
            git fetch "${REMOTE}" "${BRANCH}" --no-tags
            git checkout "${BRANCH}"
            git merge "${TAG}" --no-edit --signoff
            git push "${REMOTE}" "${BRANCH}"
        fi
    done
    git checkout "${DEFAULT_BRANCH}"
}

# Find and set toolchain variables
function check_toolchain() {
    local TC
    TC="$(find "${ARM64_TOOLCHAIN_DIR}"/bin -name '*-gcc')";
    if [ -f "${TC}" ]; then
        CROSS_COMPILE="${ARM64_TOOLCHAIN_DIR}/bin/$(echo "${TC}" | awk -F '/' '{print $NF}' | sed -e 's/gcc//')";
        echoText "Using toolchain: $("${CROSS_COMPILE}"gcc --version | head -1)"
    else
        reportError "No suitable toolchain found in ${ARM64_TOOLCHAIN_DIR}";
    fi
    TC="$(find "${ARM_TOOLCHAIN_DIR}"/bin -name '*-gcc')";
    if [ -f "${TC}" ]; then
        CROSS_COMPILE_ARM32="${ARM_TOOLCHAIN_DIR}/bin/$(echo "${TC}" | awk -F '/' '{print $NF}' | sed -e 's/gcc//')";
        echoText "Using toolchain: $("${CROSS_COMPILE_ARM32}gcc" --version | head -1)"
    else
        reportError "No suitable toolchain found in ${ARM_TOOLCHAIN_DIR}";
    fi
    TC="$(find "${CLANG_TOOLCHAIN_DIR}"/bin -name clang)";
    if [ -f "${TC}" ]; then
        CC="${CLANG_TOOLCHAIN_DIR}/bin/clang"
        KBUILD_COMPILER_STRING="$(${CC} --version | head -n 1 | cut -d \( -f 1,2 | sed 's/[[:space:]]*$//')"
        echoText "Using clang: ${KBUILD_COMPILER_STRING}"
    fi
}

# Duh
function make_kernel {
    local RETURN_VAL BUILT_KERNEL
    case "${DEVICE}" in
        "oneplus3")
            FILES_TO_MOVE=( "arch/arm64/boot/${KERNEL}:${ANYKERNEL_DIR}" )
            ;;
        "wahoo")
            FILES_TO_MOVE=( "arch/arm64/boot/${KERNEL}:${ANYKERNEL_DIR}/kernel"
                            "arch/arm64/boot/dtbo.img:${ANYKERNEL_DIR}" )
            for DTB in out/arch/arm64/boot/dts/qcom/*.dtb; do
                FILES_TO_MOVE+=( "${DTB#*/}:${ANYKERNEL_DIR}/dtbs" )
            done
            ;;
    esac
    export FILES_TO_MOVE
    tgm_caesium "Building \`${FINAL_VER}\`"
    mkdir -p "${OUT_DIR}"
    find "${OUT_DIR}" -name "${KERNEL}" -exec rm -rf {} \;
    make_defconfig
    if [ "${MODULE}" ]; then
        kmake "${MODULE}"
    else
        kmake
    fi
    RETURN_VAL="$?"
    BUILT_KERNEL="${FILES_TO_MOVE[0]%:*}"
    if [ -f "${OUT_DIR}/${BUILT_KERNEL}" ]; then
        move_kernel_files
        return 0
    elif [ ! -z "${MODULE}" ] && [ "${RETURN_VAL}" == 0 ]; then
        echo ''
    else
      reportError "Kernel compilation failed"
      tgm "Build failed"
      exit 1
    fi
}

# Move kernel files after compilation
function move_kernel_files() {
    git -C "${ANYKERNEL_DIR}" clean -fdx 1>/dev/null 2>&1
    # Move the kernel image
    for FTM in "${FILES_TO_MOVE[@]}"; do
        mkdir -p "${FTM#*:}"
        cp "${OUT_DIR}/${FTM%:*}" "${FTM#*:}"
    done
    echo "Version: $(cat "${OUT_DIR}/include/config/kernel.release")" > "${ANYKERNEL_DIR}/version"
}

# Called by make_kernel, used to trap defconfig regen events
function make_defconfig {
    [ "${CLEAN}" ] && rm -rf "${OUT_DIR}"
    kmake "${DEFCONFIG}" 1>/dev/null 2>&1
    if [ "${REGEN_DEFCONFIG}" ]; then
        kmake savedefconfig 1>/dev/null 2>&1
        cp "${OUT_DIR}"/defconfig arch/"${ARCH}"/configs/"${DEFCONFIG}"
        echoText "Regenerated defconfig successfully"
        exit 0
    fi
}

# Create the final ZIP
function make_zip {
    local UNSIGNED_ZIP="${FINAL_VER}"_unsigned.zip
    local SIGNED_ZIP="${FINAL_VER}".zip
    cd "${ANYKERNEL_DIR}" || return
    echo "${FINAL_VER}" > version
    rm ./*.zip 2>/dev/null
    zip -r "${UNSIGNED_ZIP}" ./* -x ".git/*" "README.md" ".gitignore" "*.zip" 1>/dev/null 2>&1
    [ -z "${KEYSTORE_PASSWORD}" ] || echo "${KEYSTORE_PASSWORD}" | jarsigner -keystore "${SCRIPT_DIR}"/caesium_release.keystore "${UNSIGNED_ZIP}" msfjarvis
    mv "${UNSIGNED_ZIP}" "${SIGNED_ZIP}"
    mkdir -p "${ZIP_MOVE}"
    mv  "${SIGNED_ZIP}" "${ZIP_MOVE}"/
    rm "${ANYKERNEL_DIR}/${KERNEL}" 1>/dev/null 2>&1
    cd "${WORKING_DIR}" || return
}

while getopts ":bcd:m:rt:v" OPT; do
    case "${OPT}" in
        b) echoText " Building ZIP only " >&2; ONLY_ZIP=true ;;
        c) echoText " Building clean " >&2; CLEAN=true ;;
        d)
        DEVICE="${OPTARG}"
        ANYKERNEL_DIR="${WORKING_DIR}/../AnyKernel2_${DEVICE}"
        FINAL_VER="${KERNEL_NAME}"-"${DEVICE}"-"${INCREMENTAL_VERSION}"
        ;;
        m)
        MODULE="${OPTARG}"
        [[ "${MODULE}" == */ ]] || MODULE="${MODULE}"/
        if [ ! "$(ls "${MODULE}"Kconfig*  2>/dev/null)" ]; then
            reportError "Invalid module specified - ${MODULE}"
            return 1
        fi
        echoText "Building module ${MODULE}"
        ;;
        r) echoText " Regenerating defconfig " >&2; REGEN_DEFCONFIG=true ;;
        t)
        TYPE="${OPTARG}"
        if [ "${TYPE}" != "stable" ]; then
            echoText " Setting test build parameters" >&2
            export LOCALVERSION=-"${INCREMENTAL_VERSION}"-"${GIT_HASH}"
        fi
        ;;
        v) VERBOSE=true ;;
        \?)
        reportWarning "Invalid option: -${OPTARG}" >&2
        ;;
    esac
done

DATE_START=$(date +"%s")

# Make
rm "${FINAL_VER}".zip 2>/dev/null
check_toolchain
if [ "${ONLY_ZIP}" ] && [ -z "${MODULE}" ]; then
    make_zip
else
    make_kernel
    [ -z "${MODULE}" ] && make_zip
fi
DATE_END="$(date +"%s")"
DIFF="$(bc <<< "${DATE_END} - ${DATE_START}")"

if [ -f zips/"${FINAL_VER}".zip ]; then
    tgm_caesium "Build successful in $(bc <<< "${DIFF} / 60") minute(s) and $(bc <<< "${DIFF} % 60") seconds."
    echoText "Build successful in $(bc <<< "${DIFF} / 60") minute(s) and $(bc <<< "${DIFF} % 60") seconds."
    reportSuccess "${FINAL_VER}".zip
    pushcaesiumtg "${FINAL_VER}".zip "${TYPE}"
fi